
// .js file is generated by npm scripts compile/watch/compile-tests/... :
// Do not modify .js file

import { vscode } from './acquireVsCodeApi';
import { HistoryNavigator } from '../vs/base/common/history';
import { Delayer } from '../vs/base/common/async';

type EventHistoryHandler = (event: any) => void;

export class HistoryInput {
    get value(): string { return this.input.value; }
    private set value(value: string) { this.input.value = value; }
    private readonly id: string;
    private readonly input: HTMLInputElement;
    private readonly placeholder: string;
    private readonly onTextModified: EventHistoryHandler;
    private readonly onTextValidated: EventHistoryHandler;
    private readonly history = new HistoryNavigator<string>(undefined, 100);  // 100 = vscode HistoryInputBox constructor
    private readonly historyDelayer = new Delayer<void>(2000);  // 2000 ms = vscode SearchView constructor

    constructor(id: string, placeholder: string,
                onTextModified: EventHistoryHandler,
                onTextValidated: EventHistoryHandler) {
        this.id                = id;
        this.input             = document.getElementById(id)! as HTMLInputElement;
        this.placeholder       = placeholder;
        this.input.placeholder = placeholder;
        this.onTextModified    = onTextModified;
        this.onTextValidated   = onTextValidated;

        this.input.onfocus = () => { this.input.placeholder = this.placeholder + " (\u21C5 for history)"; };
        this.input.onblur =  () => { this.input.placeholder = this.placeholder; };

        this.input.addEventListener( 'input', (event: any) => {
            this.onTextModified(event);

            if (this.input.value !== "") {
                this.historyDelayer.trigger(() => {
                    this.addToHistory();
                });
            }
        });

        this.input.addEventListener('keydown', (event: KeyboardEvent) => {
            switch (event.key) {
                case 'Enter': {
                    // console.log('Enter');
                    // User validate text input
                    // ~idem vscode SearchWidget onSearchInputKeyDown
                    event.preventDefault();
                    this.onTextValidated(event);
                    this.addToHistory();
                    break;
                }
                case 'ArrowUp': {
                    // Display previous history if exists
                    this.setFromHistory(event);
                    break;
                }
                case 'ArrowDown': {
                    // Display next history or nothing if no more history
                    this.setFromHistory(event);
                    break;
                }
                case 'PageUp': {
                    // console.log('PageUp');
                    // Move cursor to beginning of text
                    // idem vscode SearchWidget onSearchInputKeyDown
                    event.preventDefault();
                    this.input.setSelectionRange(0, 0);
                    this.input.focus();
                    break;
                }
                case 'PageDown': {
                    // console.log('PageDown');
                    // Move cursor to end of text
                    // idem vscode SearchWidget onSearchInputKeyDown
                    event.preventDefault();
                    const endOfText = this.input.value.length;
                    this.input.setSelectionRange(endOfText, endOfText);
                    this.input.focus();
                    break;
                }
            }
        });
    }
    focus(): void {
        this.input.focus();
    }
    select(): void {
        this.input.select();
    }
    setHistory(history: string[]): void {
        this.history.clear();
        for (const text of history) {
            this.history.add(text);
        }
    }
    private setFromHistory(event: KeyboardEvent): void {
        event.preventDefault();  // avoid cursor move
        event.stopPropagation();

        const oldValue = this.input.value;
        event.key === 'ArrowUp' ? this.showPreviousValue() : this.showNextValue();

        const endOfText = this.input.value.length;
        this.input.setSelectionRange(endOfText, endOfText);
        if (this.input.value !== oldValue) {
            this.onTextModified(event);
        }
    }
    // ~vscode HistoryInputBox
	public showNextValue(): void {
		if (!this.history.has(this.value)) {
			this.addToHistory();
		}

		let next = this.getNextValue();
		if (next) {
			next = next === this.value ? this.getNextValue() : next;
		}

		this.value = next ?? '';
        // aria.status(this.value ? this.value : nls.localize('clearedInput', "Cleared Input"));
	}
    // ~vscode HistoryInputBox
    public showPreviousValue(): void {
        if (!this.history.has(this.value)) {
            this.addToHistory();
        }

        let previous = this.getPreviousValue();
        if (previous) {
            previous = previous === this.value ? this.getPreviousValue() : previous;
        }

        if (previous) {
            this.value = previous;
            // aria.status(this.value);
        }
    }
    // vscode HistoryInputBox
    private getCurrentValue(): string | null {
        let currentValue = this.history.current();
        if (!currentValue) {
            currentValue = this.history.last();
            this.history.next();
        }
        return currentValue;
    }
    // vscode HistoryInputBox
    private getPreviousValue(): string | null {
        return this.history.previous() || this.history.first();
    }
    // vscode HistoryInputBox
    private getNextValue(): string | null {
        return this.history.next();
    }
    private addToHistory(): void {
        if (this.input.value === "") {
            return;
        }
        if (this.value === this.getCurrentValue()) {
            return;
        }

        console.log(`addToHistory ${this.input.value}`);
        this.historyDelayer.cancel();
        this.history.add(this.input.value);

        const message = {
            command: 'history',
            fieldId: this.id,
            history: this.history.getHistory(),
        };
        vscode.postMessage(message);
    }
}
