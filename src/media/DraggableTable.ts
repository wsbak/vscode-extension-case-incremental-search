
// .js file is generated by npm scripts compile/watch/compile-tests/... :
// Do not modify .js file


// DraggableTable class to make rows of a table draggable
export class DraggableTable {
    private tableId: string;
    private table: HTMLElement;
    private tbody: HTMLElement;
    private onRowDropped: (rowDropped: Element) => void;
    private currRow: Element | null;
    private dragElem: HTMLElement | null;
    private mouseDownX: number;
    private mouseDownY: number;
    private mouseX: number;
    private mouseY: number;
    private mouseDrag: boolean;
    
    constructor(tableId: string, onRowDropped: (rowDropped: Element) => void) {
        this.tableId = tableId;
        this.table = document.getElementById(tableId)!;
        this.tbody = this.table.querySelector('tbody')!;
        this.onRowDropped = onRowDropped;
        this.currRow = null;
        this.dragElem = null;
        this.mouseDownX = 0;
        this.mouseDownY = 0;
        this.mouseX = 0;
        this.mouseY = 0;
        this.mouseDrag = false;

        this.bindMouse();
    }

    bindMouse(): void {
        // console.log(this.tableId, "bindMouse");

        document.addEventListener('mousedown', (event) => {
            // console.log(this.tableId, "mousedown");
            if(event.button !== 0) {
                // console.log(this.tableId, "event.button", event.button);
                return true;
            }

            const target = this.getTargetRow(event.target);
            if(target) {
                this.currRow = target;
                this.addDraggableRow(target);
                this.currRow!.classList.add('is-dragging');

                const coords = this.getMouseCoords(event);
                this.mouseDownX = coords.x;
                this.mouseDownY = coords.y;      

                this.mouseDrag = true;
                // console.log(this.tableId, "mousedown", "this.mouseDownX", this.mouseDownX, "this.mouseDownY", this.mouseDownY);
            }
            return true;
        });

        document.addEventListener('mousemove', (event) => {
            if(!this.mouseDrag) {
                // console.log(this.tableId, "mousemove", "no mouseDrag");
                return;
            }
            // console.log(this.tableId, "mousemove");

            const coords = this.getMouseCoords(event);
            this.mouseX = coords.x - this.mouseDownX;
            this.mouseY = coords.y - this.mouseDownY;  

            this.moveRow(this.mouseX, this.mouseY);
        });

        document.addEventListener('mouseup', (_event) => {
            if(!this.mouseDrag) {
                return;
            }
            // console.log(this.tableId, "mouseup");

            this.currRow!.classList.remove('is-dragging');
            this.table.removeChild(this.dragElem!);

            this.dragElem = null;
            this.mouseDrag = false;

            this.onRowDropped(this.currRow!);
        });    
    }

    swapRow(row: any, index: number): void {
        const currIndex = Array.from(this.tbody.children).indexOf(this.currRow!);
        const row1 = currIndex > index ? this.currRow : row;
        const row2 = currIndex > index ? row : this.currRow;

        this.tbody.insertBefore(row1, row2);
    }

    moveRow(x: number, y: number): void {
        this.dragElem!.style.transform = "translate3d(" + x + "px, " + y + "px, 0)";

        const	dragElemPos = this.dragElem!.getBoundingClientRect();
        const currStartY = dragElemPos.y;
        const currEndY = currStartY + dragElemPos.height;
        const rows = this.getRows();

        for(var i = 0; i < rows.length; i++) {
            const rowElem = rows[i];
            const rowSize = rowElem.getBoundingClientRect();
            const rowStartY = rowSize.y, rowEndY = rowStartY + rowSize.height;

            if(this.currRow !== rowElem && this.isIntersecting(currStartY, currEndY, rowStartY, rowEndY)) {
                if(Math.abs(currStartY - rowStartY) < rowSize.height / 2) {
                    this.swapRow(rowElem, i);
                }
            }
        }    
    }

    addDraggableRow(target: any): void {
        this.dragElem = target.cloneNode(true);
        this.dragElem!.classList.add('draggable-table__drag');
        this.dragElem!.style.height = this.getStyle(target, 'height');
        this.dragElem!.style.background = this.getStyle(target, 'backgroundColor');

        const td = this.dragElem!.querySelectorAll('.draggable-handler')[0] as HTMLElement;
        td.style.cursor = "grabbing";

        for(var i = 0; i < target.children.length; i++) {
            const oldTD = target.children[i];
            const newTD = this.dragElem!.children[i] as HTMLElement;
            newTD.style.width = this.getStyle(oldTD, 'width');
            newTD.style.height = this.getStyle(oldTD, 'height');
            newTD.style.padding = this.getStyle(oldTD, 'padding');
            newTD.style.margin = this.getStyle(oldTD, 'margin');
        }      

        this.table.appendChild(this.dragElem!);

        const targetPos = target.getBoundingClientRect();
        const dragElemPos = this.dragElem!.getBoundingClientRect();
        // console.log(this.tableId, 'addDraggableRow', 'targetPos', targetPos, 'dragElemPos', dragElemPos);
        this.dragElem!.style.bottom = (dragElemPos.y - targetPos.y) + "px";
        this.dragElem!.style.left = "-1px";
        // console.log(this.tableId, 'addDraggableRow', 'dragElem.style.bottom', this.dragElem!.style.bottom);

        document.dispatchEvent(new MouseEvent('mousemove',
            { view: window, cancelable: true, bubbles: true }
        ));    
    }  

    // Return all rows containing a td with draggable-handler class
    getRows(): Element[] {
        const rows = this.table.querySelectorAll('tbody tr');
        const draggableRows = Array.from(rows).filter(row => row.querySelector('td.draggable-handler'));
        return draggableRows;
    }    

    // Return the row containing the target 
    getTargetRow(target: any): Element | null {
        if(target.classList.contains('draggable-handler')) {
            const row: Element = target.closest('tr')!;
            if(this.table?.contains(row)) {
                // console.log(this.tableId, 'draggable-handler found inside table');
                return row;
            }
        }
        return null;
    }

    getMouseCoords(event: any): any {
        return {
            x: event.clientX,
            y: event.clientY
        };    
    }  

    getStyle(target: Element, styleName: any): any | null {
        const compStyle = getComputedStyle(target);
        const style = compStyle[styleName];

        return style ? style : null;
    }  

    isIntersecting(min0: number, max0: number, min1: number, max1: number): boolean {
        return Math.max(min0, max0) >= Math.min(min1, max1) &&
               Math.min(min0, max0) <= Math.max(min1, max1);
    }  
}
